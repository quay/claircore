// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quay/claircore/indexer (interfaces: Store,PackageScanner,VersionedScanner,DistributionScanner,RepositoryScanner,Coalescer,Realizer,FetchArena)
//
// Generated by this command:
//
//	mockgen -destination=./mocks.go github.com/quay/claircore/indexer Store,PackageScanner,VersionedScanner,DistributionScanner,RepositoryScanner,Coalescer,Realizer,FetchArena
//

// Package mock_indexer is a generated GoMock package.
package mock_indexer

import (
	context "context"
	reflect "reflect"

	claircore "github.com/quay/claircore"
	indexer "github.com/quay/claircore/indexer"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AffectedManifests mocks base method.
func (m *MockStore) AffectedManifests(ctx context.Context, v claircore.Vulnerability) ([]claircore.Digest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AffectedManifests", ctx, v)
	ret0, _ := ret[0].([]claircore.Digest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AffectedManifests indicates an expected call of AffectedManifests.
func (mr *MockStoreMockRecorder) AffectedManifests(ctx, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AffectedManifests", reflect.TypeOf((*MockStore)(nil).AffectedManifests), ctx, v)
}

// Close mocks base method.
func (m *MockStore) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close), arg0)
}

// DeleteManifests mocks base method.
func (m *MockStore) DeleteManifests(arg0 context.Context, arg1 ...claircore.Digest) ([]claircore.Digest, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteManifests", varargs...)
	ret0, _ := ret[0].([]claircore.Digest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteManifests indicates an expected call of DeleteManifests.
func (mr *MockStoreMockRecorder) DeleteManifests(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteManifests", reflect.TypeOf((*MockStore)(nil).DeleteManifests), varargs...)
}

// DistributionsByLayer mocks base method.
func (m *MockStore) DistributionsByLayer(ctx context.Context, hash claircore.Digest, scnrs indexer.VersionedScanners) ([]*claircore.Distribution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistributionsByLayer", ctx, hash, scnrs)
	ret0, _ := ret[0].([]*claircore.Distribution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DistributionsByLayer indicates an expected call of DistributionsByLayer.
func (mr *MockStoreMockRecorder) DistributionsByLayer(ctx, hash, scnrs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributionsByLayer", reflect.TypeOf((*MockStore)(nil).DistributionsByLayer), ctx, hash, scnrs)
}

// FilesByLayer mocks base method.
func (m *MockStore) FilesByLayer(ctx context.Context, hash claircore.Digest, scnrs indexer.VersionedScanners) ([]claircore.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilesByLayer", ctx, hash, scnrs)
	ret0, _ := ret[0].([]claircore.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilesByLayer indicates an expected call of FilesByLayer.
func (mr *MockStoreMockRecorder) FilesByLayer(ctx, hash, scnrs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesByLayer", reflect.TypeOf((*MockStore)(nil).FilesByLayer), ctx, hash, scnrs)
}

// IndexDistributions mocks base method.
func (m *MockStore) IndexDistributions(ctx context.Context, dists []*claircore.Distribution, layer *claircore.Layer, scnr indexer.VersionedScanner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexDistributions", ctx, dists, layer, scnr)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexDistributions indicates an expected call of IndexDistributions.
func (mr *MockStoreMockRecorder) IndexDistributions(ctx, dists, layer, scnr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexDistributions", reflect.TypeOf((*MockStore)(nil).IndexDistributions), ctx, dists, layer, scnr)
}

// IndexFiles mocks base method.
func (m *MockStore) IndexFiles(ctx context.Context, files []claircore.File, layer *claircore.Layer, scnr indexer.VersionedScanner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexFiles", ctx, files, layer, scnr)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexFiles indicates an expected call of IndexFiles.
func (mr *MockStoreMockRecorder) IndexFiles(ctx, files, layer, scnr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexFiles", reflect.TypeOf((*MockStore)(nil).IndexFiles), ctx, files, layer, scnr)
}

// IndexManifest mocks base method.
func (m *MockStore) IndexManifest(ctx context.Context, ir *claircore.IndexReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexManifest", ctx, ir)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexManifest indicates an expected call of IndexManifest.
func (mr *MockStoreMockRecorder) IndexManifest(ctx, ir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexManifest", reflect.TypeOf((*MockStore)(nil).IndexManifest), ctx, ir)
}

// IndexPackages mocks base method.
func (m *MockStore) IndexPackages(ctx context.Context, pkgs []*claircore.Package, layer *claircore.Layer, scnr indexer.VersionedScanner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexPackages", ctx, pkgs, layer, scnr)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexPackages indicates an expected call of IndexPackages.
func (mr *MockStoreMockRecorder) IndexPackages(ctx, pkgs, layer, scnr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexPackages", reflect.TypeOf((*MockStore)(nil).IndexPackages), ctx, pkgs, layer, scnr)
}

// IndexReport mocks base method.
func (m *MockStore) IndexReport(ctx context.Context, hash claircore.Digest) (*claircore.IndexReport, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexReport", ctx, hash)
	ret0, _ := ret[0].(*claircore.IndexReport)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IndexReport indicates an expected call of IndexReport.
func (mr *MockStoreMockRecorder) IndexReport(ctx, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexReport", reflect.TypeOf((*MockStore)(nil).IndexReport), ctx, hash)
}

// IndexRepositories mocks base method.
func (m *MockStore) IndexRepositories(ctx context.Context, repos []*claircore.Repository, layer *claircore.Layer, scnr indexer.VersionedScanner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexRepositories", ctx, repos, layer, scnr)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexRepositories indicates an expected call of IndexRepositories.
func (mr *MockStoreMockRecorder) IndexRepositories(ctx, repos, layer, scnr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexRepositories", reflect.TypeOf((*MockStore)(nil).IndexRepositories), ctx, repos, layer, scnr)
}

// LayerScanned mocks base method.
func (m *MockStore) LayerScanned(ctx context.Context, hash claircore.Digest, scnr indexer.VersionedScanner) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LayerScanned", ctx, hash, scnr)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LayerScanned indicates an expected call of LayerScanned.
func (mr *MockStoreMockRecorder) LayerScanned(ctx, hash, scnr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LayerScanned", reflect.TypeOf((*MockStore)(nil).LayerScanned), ctx, hash, scnr)
}

// ManifestScanned mocks base method.
func (m *MockStore) ManifestScanned(ctx context.Context, hash claircore.Digest, scnrs indexer.VersionedScanners) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManifestScanned", ctx, hash, scnrs)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ManifestScanned indicates an expected call of ManifestScanned.
func (mr *MockStoreMockRecorder) ManifestScanned(ctx, hash, scnrs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManifestScanned", reflect.TypeOf((*MockStore)(nil).ManifestScanned), ctx, hash, scnrs)
}

// PackagesByLayer mocks base method.
func (m *MockStore) PackagesByLayer(ctx context.Context, hash claircore.Digest, scnrs indexer.VersionedScanners) ([]*claircore.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackagesByLayer", ctx, hash, scnrs)
	ret0, _ := ret[0].([]*claircore.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PackagesByLayer indicates an expected call of PackagesByLayer.
func (mr *MockStoreMockRecorder) PackagesByLayer(ctx, hash, scnrs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackagesByLayer", reflect.TypeOf((*MockStore)(nil).PackagesByLayer), ctx, hash, scnrs)
}

// PersistManifest mocks base method.
func (m *MockStore) PersistManifest(ctx context.Context, manifest claircore.Manifest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistManifest", ctx, manifest)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistManifest indicates an expected call of PersistManifest.
func (mr *MockStoreMockRecorder) PersistManifest(ctx, manifest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistManifest", reflect.TypeOf((*MockStore)(nil).PersistManifest), ctx, manifest)
}

// RegisterScanners mocks base method.
func (m *MockStore) RegisterScanners(ctx context.Context, scnrs indexer.VersionedScanners) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterScanners", ctx, scnrs)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterScanners indicates an expected call of RegisterScanners.
func (mr *MockStoreMockRecorder) RegisterScanners(ctx, scnrs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterScanners", reflect.TypeOf((*MockStore)(nil).RegisterScanners), ctx, scnrs)
}

// RepositoriesByLayer mocks base method.
func (m *MockStore) RepositoriesByLayer(ctx context.Context, hash claircore.Digest, scnrs indexer.VersionedScanners) ([]*claircore.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepositoriesByLayer", ctx, hash, scnrs)
	ret0, _ := ret[0].([]*claircore.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepositoriesByLayer indicates an expected call of RepositoriesByLayer.
func (mr *MockStoreMockRecorder) RepositoriesByLayer(ctx, hash, scnrs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoriesByLayer", reflect.TypeOf((*MockStore)(nil).RepositoriesByLayer), ctx, hash, scnrs)
}

// SetIndexFinished mocks base method.
func (m *MockStore) SetIndexFinished(ctx context.Context, sr *claircore.IndexReport, scnrs indexer.VersionedScanners) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIndexFinished", ctx, sr, scnrs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIndexFinished indicates an expected call of SetIndexFinished.
func (mr *MockStoreMockRecorder) SetIndexFinished(ctx, sr, scnrs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIndexFinished", reflect.TypeOf((*MockStore)(nil).SetIndexFinished), ctx, sr, scnrs)
}

// SetIndexReport mocks base method.
func (m *MockStore) SetIndexReport(arg0 context.Context, arg1 *claircore.IndexReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIndexReport", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIndexReport indicates an expected call of SetIndexReport.
func (mr *MockStoreMockRecorder) SetIndexReport(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIndexReport", reflect.TypeOf((*MockStore)(nil).SetIndexReport), arg0, arg1)
}

// SetLayerScanned mocks base method.
func (m *MockStore) SetLayerScanned(ctx context.Context, hash claircore.Digest, scnr indexer.VersionedScanner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLayerScanned", ctx, hash, scnr)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLayerScanned indicates an expected call of SetLayerScanned.
func (mr *MockStoreMockRecorder) SetLayerScanned(ctx, hash, scnr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLayerScanned", reflect.TypeOf((*MockStore)(nil).SetLayerScanned), ctx, hash, scnr)
}

// MockPackageScanner is a mock of PackageScanner interface.
type MockPackageScanner struct {
	ctrl     *gomock.Controller
	recorder *MockPackageScannerMockRecorder
	isgomock struct{}
}

// MockPackageScannerMockRecorder is the mock recorder for MockPackageScanner.
type MockPackageScannerMockRecorder struct {
	mock *MockPackageScanner
}

// NewMockPackageScanner creates a new mock instance.
func NewMockPackageScanner(ctrl *gomock.Controller) *MockPackageScanner {
	mock := &MockPackageScanner{ctrl: ctrl}
	mock.recorder = &MockPackageScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageScanner) EXPECT() *MockPackageScannerMockRecorder {
	return m.recorder
}

// Kind mocks base method.
func (m *MockPackageScanner) Kind() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(string)
	return ret0
}

// Kind indicates an expected call of Kind.
func (mr *MockPackageScannerMockRecorder) Kind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockPackageScanner)(nil).Kind))
}

// Name mocks base method.
func (m *MockPackageScanner) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPackageScannerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPackageScanner)(nil).Name))
}

// Scan mocks base method.
func (m *MockPackageScanner) Scan(arg0 context.Context, arg1 *claircore.Layer) ([]*claircore.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", arg0, arg1)
	ret0, _ := ret[0].([]*claircore.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockPackageScannerMockRecorder) Scan(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockPackageScanner)(nil).Scan), arg0, arg1)
}

// Version mocks base method.
func (m *MockPackageScanner) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockPackageScannerMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockPackageScanner)(nil).Version))
}

// MockVersionedScanner is a mock of VersionedScanner interface.
type MockVersionedScanner struct {
	ctrl     *gomock.Controller
	recorder *MockVersionedScannerMockRecorder
	isgomock struct{}
}

// MockVersionedScannerMockRecorder is the mock recorder for MockVersionedScanner.
type MockVersionedScannerMockRecorder struct {
	mock *MockVersionedScanner
}

// NewMockVersionedScanner creates a new mock instance.
func NewMockVersionedScanner(ctrl *gomock.Controller) *MockVersionedScanner {
	mock := &MockVersionedScanner{ctrl: ctrl}
	mock.recorder = &MockVersionedScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionedScanner) EXPECT() *MockVersionedScannerMockRecorder {
	return m.recorder
}

// Kind mocks base method.
func (m *MockVersionedScanner) Kind() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(string)
	return ret0
}

// Kind indicates an expected call of Kind.
func (mr *MockVersionedScannerMockRecorder) Kind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockVersionedScanner)(nil).Kind))
}

// Name mocks base method.
func (m *MockVersionedScanner) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockVersionedScannerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockVersionedScanner)(nil).Name))
}

// Version mocks base method.
func (m *MockVersionedScanner) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockVersionedScannerMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockVersionedScanner)(nil).Version))
}

// MockDistributionScanner is a mock of DistributionScanner interface.
type MockDistributionScanner struct {
	ctrl     *gomock.Controller
	recorder *MockDistributionScannerMockRecorder
	isgomock struct{}
}

// MockDistributionScannerMockRecorder is the mock recorder for MockDistributionScanner.
type MockDistributionScannerMockRecorder struct {
	mock *MockDistributionScanner
}

// NewMockDistributionScanner creates a new mock instance.
func NewMockDistributionScanner(ctrl *gomock.Controller) *MockDistributionScanner {
	mock := &MockDistributionScanner{ctrl: ctrl}
	mock.recorder = &MockDistributionScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributionScanner) EXPECT() *MockDistributionScannerMockRecorder {
	return m.recorder
}

// Kind mocks base method.
func (m *MockDistributionScanner) Kind() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(string)
	return ret0
}

// Kind indicates an expected call of Kind.
func (mr *MockDistributionScannerMockRecorder) Kind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockDistributionScanner)(nil).Kind))
}

// Name mocks base method.
func (m *MockDistributionScanner) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockDistributionScannerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDistributionScanner)(nil).Name))
}

// Scan mocks base method.
func (m *MockDistributionScanner) Scan(arg0 context.Context, arg1 *claircore.Layer) ([]*claircore.Distribution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", arg0, arg1)
	ret0, _ := ret[0].([]*claircore.Distribution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockDistributionScannerMockRecorder) Scan(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockDistributionScanner)(nil).Scan), arg0, arg1)
}

// Version mocks base method.
func (m *MockDistributionScanner) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockDistributionScannerMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockDistributionScanner)(nil).Version))
}

// MockRepositoryScanner is a mock of RepositoryScanner interface.
type MockRepositoryScanner struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryScannerMockRecorder
	isgomock struct{}
}

// MockRepositoryScannerMockRecorder is the mock recorder for MockRepositoryScanner.
type MockRepositoryScannerMockRecorder struct {
	mock *MockRepositoryScanner
}

// NewMockRepositoryScanner creates a new mock instance.
func NewMockRepositoryScanner(ctrl *gomock.Controller) *MockRepositoryScanner {
	mock := &MockRepositoryScanner{ctrl: ctrl}
	mock.recorder = &MockRepositoryScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryScanner) EXPECT() *MockRepositoryScannerMockRecorder {
	return m.recorder
}

// Kind mocks base method.
func (m *MockRepositoryScanner) Kind() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(string)
	return ret0
}

// Kind indicates an expected call of Kind.
func (mr *MockRepositoryScannerMockRecorder) Kind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockRepositoryScanner)(nil).Kind))
}

// Name mocks base method.
func (m *MockRepositoryScanner) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRepositoryScannerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRepositoryScanner)(nil).Name))
}

// Scan mocks base method.
func (m *MockRepositoryScanner) Scan(arg0 context.Context, arg1 *claircore.Layer) ([]*claircore.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", arg0, arg1)
	ret0, _ := ret[0].([]*claircore.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockRepositoryScannerMockRecorder) Scan(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRepositoryScanner)(nil).Scan), arg0, arg1)
}

// Version mocks base method.
func (m *MockRepositoryScanner) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockRepositoryScannerMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockRepositoryScanner)(nil).Version))
}

// MockCoalescer is a mock of Coalescer interface.
type MockCoalescer struct {
	ctrl     *gomock.Controller
	recorder *MockCoalescerMockRecorder
	isgomock struct{}
}

// MockCoalescerMockRecorder is the mock recorder for MockCoalescer.
type MockCoalescerMockRecorder struct {
	mock *MockCoalescer
}

// NewMockCoalescer creates a new mock instance.
func NewMockCoalescer(ctrl *gomock.Controller) *MockCoalescer {
	mock := &MockCoalescer{ctrl: ctrl}
	mock.recorder = &MockCoalescerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoalescer) EXPECT() *MockCoalescerMockRecorder {
	return m.recorder
}

// Coalesce mocks base method.
func (m *MockCoalescer) Coalesce(ctx context.Context, artifacts []*indexer.LayerArtifacts) (*claircore.IndexReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Coalesce", ctx, artifacts)
	ret0, _ := ret[0].(*claircore.IndexReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Coalesce indicates an expected call of Coalesce.
func (mr *MockCoalescerMockRecorder) Coalesce(ctx, artifacts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Coalesce", reflect.TypeOf((*MockCoalescer)(nil).Coalesce), ctx, artifacts)
}

// MockRealizer is a mock of Realizer interface.
type MockRealizer struct {
	ctrl     *gomock.Controller
	recorder *MockRealizerMockRecorder
	isgomock struct{}
}

// MockRealizerMockRecorder is the mock recorder for MockRealizer.
type MockRealizerMockRecorder struct {
	mock *MockRealizer
}

// NewMockRealizer creates a new mock instance.
func NewMockRealizer(ctrl *gomock.Controller) *MockRealizer {
	mock := &MockRealizer{ctrl: ctrl}
	mock.recorder = &MockRealizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRealizer) EXPECT() *MockRealizerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRealizer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRealizerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRealizer)(nil).Close))
}

// Realize mocks base method.
func (m *MockRealizer) Realize(arg0 context.Context, arg1 []*claircore.Layer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Realize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Realize indicates an expected call of Realize.
func (mr *MockRealizerMockRecorder) Realize(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Realize", reflect.TypeOf((*MockRealizer)(nil).Realize), arg0, arg1)
}

// MockFetchArena is a mock of FetchArena interface.
type MockFetchArena struct {
	ctrl     *gomock.Controller
	recorder *MockFetchArenaMockRecorder
	isgomock struct{}
}

// MockFetchArenaMockRecorder is the mock recorder for MockFetchArena.
type MockFetchArenaMockRecorder struct {
	mock *MockFetchArena
}

// NewMockFetchArena creates a new mock instance.
func NewMockFetchArena(ctrl *gomock.Controller) *MockFetchArena {
	mock := &MockFetchArena{ctrl: ctrl}
	mock.recorder = &MockFetchArenaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchArena) EXPECT() *MockFetchArenaMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFetchArena) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFetchArenaMockRecorder) Close(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFetchArena)(nil).Close), arg0)
}

// Realizer mocks base method.
func (m *MockFetchArena) Realizer(arg0 context.Context) indexer.Realizer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Realizer", arg0)
	ret0, _ := ret[0].(indexer.Realizer)
	return ret0
}

// Realizer indicates an expected call of Realizer.
func (mr *MockFetchArenaMockRecorder) Realizer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Realizer", reflect.TypeOf((*MockFetchArena)(nil).Realizer), arg0)
}
