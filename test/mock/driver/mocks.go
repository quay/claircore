// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quay/claircore/libvuln/driver (interfaces: Matcher)
//
// Generated by this command:
//
//	mockgen -destination=./mocks.go github.com/quay/claircore/libvuln/driver Matcher
//

// Package mock_driver is a generated GoMock package.
package mock_driver

import (
	context "context"
	reflect "reflect"

	claircore "github.com/quay/claircore"
	driver "github.com/quay/claircore/libvuln/driver"
	gomock "go.uber.org/mock/gomock"
)

// MockMatcher is a mock of Matcher interface.
type MockMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockMatcherMockRecorder
	isgomock struct{}
}

// MockMatcherMockRecorder is the mock recorder for MockMatcher.
type MockMatcherMockRecorder struct {
	mock *MockMatcher
}

// NewMockMatcher creates a new mock instance.
func NewMockMatcher(ctrl *gomock.Controller) *MockMatcher {
	mock := &MockMatcher{ctrl: ctrl}
	mock.recorder = &MockMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatcher) EXPECT() *MockMatcherMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockMatcher) Filter(record *claircore.IndexRecord) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", record)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockMatcherMockRecorder) Filter(record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockMatcher)(nil).Filter), record)
}

// Name mocks base method.
func (m *MockMatcher) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockMatcherMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockMatcher)(nil).Name))
}

// Query mocks base method.
func (m *MockMatcher) Query() []driver.MatchConstraint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query")
	ret0, _ := ret[0].([]driver.MatchConstraint)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockMatcherMockRecorder) Query() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockMatcher)(nil).Query))
}

// Vulnerable mocks base method.
func (m *MockMatcher) Vulnerable(ctx context.Context, record *claircore.IndexRecord, vuln *claircore.Vulnerability) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vulnerable", ctx, record, vuln)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Vulnerable indicates an expected call of Vulnerable.
func (mr *MockMatcherMockRecorder) Vulnerable(ctx, record, vuln any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vulnerable", reflect.TypeOf((*MockMatcher)(nil).Vulnerable), ctx, record, vuln)
}
