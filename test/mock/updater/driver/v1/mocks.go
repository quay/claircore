// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quay/claircore/updater/driver/v1 (interfaces: Updater,UpdaterFactory,VulnerabilityParser,EnrichmentParser)
//
// Generated by this command:
//
//	mockgen -package=mock_driver -destination=./mocks.go github.com/quay/claircore/updater/driver/v1 Updater,UpdaterFactory,VulnerabilityParser,EnrichmentParser
//

// Package mock_driver is a generated GoMock package.
package mock_driver

import (
	zip "archive/zip"
	context "context"
	fs "io/fs"
	http "net/http"
	reflect "reflect"

	driver "github.com/quay/claircore/updater/driver/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockUpdater is a mock of Updater interface.
type MockUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterMockRecorder
	isgomock struct{}
}

// MockUpdaterMockRecorder is the mock recorder for MockUpdater.
type MockUpdaterMockRecorder struct {
	mock *MockUpdater
}

// NewMockUpdater creates a new mock instance.
func NewMockUpdater(ctrl *gomock.Controller) *MockUpdater {
	mock := &MockUpdater{ctrl: ctrl}
	mock.recorder = &MockUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdater) EXPECT() *MockUpdaterMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockUpdater) Fetch(arg0 context.Context, arg1 *zip.Writer, arg2 driver.Fingerprint, arg3 *http.Client) (driver.Fingerprint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(driver.Fingerprint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockUpdaterMockRecorder) Fetch(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockUpdater)(nil).Fetch), arg0, arg1, arg2, arg3)
}

// Name mocks base method.
func (m *MockUpdater) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockUpdaterMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockUpdater)(nil).Name))
}

// MockUpdaterFactory is a mock of UpdaterFactory interface.
type MockUpdaterFactory struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterFactoryMockRecorder
	isgomock struct{}
}

// MockUpdaterFactoryMockRecorder is the mock recorder for MockUpdaterFactory.
type MockUpdaterFactoryMockRecorder struct {
	mock *MockUpdaterFactory
}

// NewMockUpdaterFactory creates a new mock instance.
func NewMockUpdaterFactory(ctrl *gomock.Controller) *MockUpdaterFactory {
	mock := &MockUpdaterFactory{ctrl: ctrl}
	mock.recorder = &MockUpdaterFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdaterFactory) EXPECT() *MockUpdaterFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUpdaterFactory) Create(arg0 context.Context, arg1 driver.ConfigUnmarshaler) ([]driver.Updater, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].([]driver.Updater)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUpdaterFactoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUpdaterFactory)(nil).Create), arg0, arg1)
}

// Name mocks base method.
func (m *MockUpdaterFactory) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockUpdaterFactoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockUpdaterFactory)(nil).Name))
}

// MockVulnerabilityParser is a mock of VulnerabilityParser interface.
type MockVulnerabilityParser struct {
	ctrl     *gomock.Controller
	recorder *MockVulnerabilityParserMockRecorder
	isgomock struct{}
}

// MockVulnerabilityParserMockRecorder is the mock recorder for MockVulnerabilityParser.
type MockVulnerabilityParserMockRecorder struct {
	mock *MockVulnerabilityParser
}

// NewMockVulnerabilityParser creates a new mock instance.
func NewMockVulnerabilityParser(ctrl *gomock.Controller) *MockVulnerabilityParser {
	mock := &MockVulnerabilityParser{ctrl: ctrl}
	mock.recorder = &MockVulnerabilityParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVulnerabilityParser) EXPECT() *MockVulnerabilityParserMockRecorder {
	return m.recorder
}

// ParseVulnerability mocks base method.
func (m *MockVulnerabilityParser) ParseVulnerability(arg0 context.Context, arg1 fs.FS) (*driver.ParsedVulnerabilities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseVulnerability", arg0, arg1)
	ret0, _ := ret[0].(*driver.ParsedVulnerabilities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseVulnerability indicates an expected call of ParseVulnerability.
func (mr *MockVulnerabilityParserMockRecorder) ParseVulnerability(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseVulnerability", reflect.TypeOf((*MockVulnerabilityParser)(nil).ParseVulnerability), arg0, arg1)
}

// MockEnrichmentParser is a mock of EnrichmentParser interface.
type MockEnrichmentParser struct {
	ctrl     *gomock.Controller
	recorder *MockEnrichmentParserMockRecorder
	isgomock struct{}
}

// MockEnrichmentParserMockRecorder is the mock recorder for MockEnrichmentParser.
type MockEnrichmentParserMockRecorder struct {
	mock *MockEnrichmentParser
}

// NewMockEnrichmentParser creates a new mock instance.
func NewMockEnrichmentParser(ctrl *gomock.Controller) *MockEnrichmentParser {
	mock := &MockEnrichmentParser{ctrl: ctrl}
	mock.recorder = &MockEnrichmentParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrichmentParser) EXPECT() *MockEnrichmentParserMockRecorder {
	return m.recorder
}

// ParseEnrichment mocks base method.
func (m *MockEnrichmentParser) ParseEnrichment(arg0 context.Context, arg1 fs.FS) ([]driver.EnrichmentRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseEnrichment", arg0, arg1)
	ret0, _ := ret[0].([]driver.EnrichmentRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseEnrichment indicates an expected call of ParseEnrichment.
func (mr *MockEnrichmentParserMockRecorder) ParseEnrichment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseEnrichment", reflect.TypeOf((*MockEnrichmentParser)(nil).ParseEnrichment), arg0, arg1)
}
