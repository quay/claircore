// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quay/claircore/internal/updater (interfaces: Updater)

// Package updater is a generated GoMock package.
package updater

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	claircore "github.com/quay/claircore"
	io "io"
	reflect "reflect"
)

// MockUpdater is a mock of Updater interface
type MockUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterMockRecorder
}

// MockUpdaterMockRecorder is the mock recorder for MockUpdater
type MockUpdaterMockRecorder struct {
	mock *MockUpdater
}

// NewMockUpdater creates a new mock instance
func NewMockUpdater(ctrl *gomock.Controller) *MockUpdater {
	mock := &MockUpdater{ctrl: ctrl}
	mock.recorder = &MockUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdater) EXPECT() *MockUpdaterMockRecorder {
	return m.recorder
}

// Fetch mocks base method
func (m *MockUpdater) Fetch(arg0 context.Context) (io.ReadCloser, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Fetch indicates an expected call of Fetch
func (mr *MockUpdaterMockRecorder) Fetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockUpdater)(nil).Fetch), arg0)
}

// Name mocks base method
func (m *MockUpdater) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockUpdaterMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockUpdater)(nil).Name))
}

// Parse mocks base method
func (m *MockUpdater) Parse(arg0 context.Context, arg1 io.ReadCloser) ([]*claircore.Vulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0, arg1)
	ret0, _ := ret[0].([]*claircore.Vulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse
func (mr *MockUpdaterMockRecorder) Parse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockUpdater)(nil).Parse), arg0, arg1)
}
