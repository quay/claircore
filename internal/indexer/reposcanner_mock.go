// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quay/claircore/internal/indexer (interfaces: RepositoryScanner)

// Package indexer is a generated GoMock package.
package indexer

import (
	gomock "github.com/golang/mock/gomock"
	claircore "github.com/quay/claircore"
	reflect "reflect"
)

// MockRepositoryScanner is a mock of RepositoryScanner interface
type MockRepositoryScanner struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryScannerMockRecorder
}

// MockRepositoryScannerMockRecorder is the mock recorder for MockRepositoryScanner
type MockRepositoryScannerMockRecorder struct {
	mock *MockRepositoryScanner
}

// NewMockRepositoryScanner creates a new mock instance
func NewMockRepositoryScanner(ctrl *gomock.Controller) *MockRepositoryScanner {
	mock := &MockRepositoryScanner{ctrl: ctrl}
	mock.recorder = &MockRepositoryScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryScanner) EXPECT() *MockRepositoryScannerMockRecorder {
	return m.recorder
}

// Kind mocks base method
func (m *MockRepositoryScanner) Kind() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(string)
	return ret0
}

// Kind indicates an expected call of Kind
func (mr *MockRepositoryScannerMockRecorder) Kind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockRepositoryScanner)(nil).Kind))
}

// Name mocks base method
func (m *MockRepositoryScanner) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockRepositoryScannerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRepositoryScanner)(nil).Name))
}

// Scan mocks base method
func (m *MockRepositoryScanner) Scan(arg0 *claircore.Layer) ([]*claircore.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", arg0)
	ret0, _ := ret[0].([]*claircore.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan
func (mr *MockRepositoryScannerMockRecorder) Scan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRepositoryScanner)(nil).Scan), arg0)
}

// Version mocks base method
func (m *MockRepositoryScanner) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version
func (mr *MockRepositoryScannerMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockRepositoryScanner)(nil).Version))
}
