// Code generated by ragel-go DO NOT EDIT.

package urn

import "errors"
import "fmt"

var _urn_trans_keys = []byte{1, 0, 14, 14, 13, 13, 12, 12, 8, 8, 7, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 7, 14, 8, 8, 0, 14, 7, 7, 7, 7, 7, 7, 7, 7, 4, 9, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 7, 7, 7, 7, 7, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 5, 14, 0, 14, 0, 14, 0, 14, 0, 14, 0, 14, 0, 14, 0, 14, 0, 14, 0, 14, 0, 14, 0, 14, 0, 14, 0}
var _urn_char_class = []int8{0, 1, 2, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 0, 1, 9, 1, 10, 0, 7, 7, 7, 7, 7, 7, 11, 11, 11, 11, 11, 11, 11, 12, 11, 11, 11, 13, 11, 11, 14, 11, 11, 11, 11, 11, 1, 1, 1, 1, 0, 1, 7, 7, 7, 7, 7, 7, 11, 11, 11, 11, 11, 11, 11, 12, 11, 11, 11, 13, 11, 11, 14, 11, 11, 11, 11, 11, 1, 1, 1, 0, 0}
var _urn_index_offsets = []int16{0, 0, 1, 2, 3, 4, 12, 22, 32, 42, 52, 62, 72, 82, 92, 102, 112, 122, 132, 142, 152, 162, 172, 182, 192, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 302, 312, 320, 321, 336, 337, 338, 339, 340, 346, 347, 348, 349, 350, 351, 352, 353, 361, 371, 381, 391, 401, 411, 421, 431, 441, 451, 461, 471, 481, 491, 501, 511, 521, 531, 541, 551, 561, 571, 581, 591, 601, 611, 621, 631, 641, 651, 666, 681, 696, 711, 726, 741, 756, 771, 786, 801, 816, 0}
var _urn_indices = []int16{3, 5, 7, 9, 12, 11, 11, 11, 12, 12, 12, 12, 14, 11, 15, 11, 11, 11, 15, 15, 15, 15, 17, 11, 18, 11, 11, 11, 18, 18, 18, 18, 20, 11, 21, 11, 11, 11, 21, 21, 21, 21, 23, 11, 24, 11, 11, 11, 24, 24, 24, 24, 26, 11, 27, 11, 11, 11, 27, 27, 27, 27, 29, 11, 30, 11, 11, 11, 30, 30, 30, 30, 32, 11, 33, 11, 11, 11, 33, 33, 33, 33, 35, 11, 36, 11, 11, 11, 36, 36, 36, 36, 38, 11, 39, 11, 11, 11, 39, 39, 39, 39, 41, 11, 42, 11, 11, 11, 42, 42, 42, 42, 44, 11, 45, 11, 11, 11, 45, 45, 45, 45, 47, 11, 48, 11, 11, 11, 48, 48, 48, 48, 50, 11, 51, 11, 11, 11, 51, 51, 51, 51, 53, 11, 54, 11, 11, 11, 54, 54, 54, 54, 56, 11, 57, 11, 11, 11, 57, 57, 57, 57, 59, 11, 60, 11, 11, 11, 60, 60, 60, 60, 62, 11, 63, 11, 11, 11, 63, 63, 63, 63, 65, 11, 66, 11, 11, 11, 66, 66, 66, 66, 68, 11, 69, 11, 11, 11, 69, 69, 69, 69, 71, 11, 72, 11, 11, 11, 72, 72, 72, 72, 74, 11, 75, 11, 11, 11, 75, 75, 75, 75, 77, 11, 78, 11, 11, 11, 78, 78, 78, 78, 80, 11, 81, 11, 11, 11, 81, 81, 81, 81, 83, 11, 84, 11, 11, 11, 84, 84, 84, 84, 86, 11, 87, 11, 11, 11, 87, 87, 87, 87, 89, 11, 90, 11, 11, 11, 90, 90, 90, 90, 92, 11, 93, 11, 11, 11, 93, 93, 93, 93, 95, 11, 96, 11, 11, 11, 96, 96, 96, 96, 98, 11, 99, 11, 11, 11, 99, 99, 99, 99, 101, 11, 102, 11, 11, 11, 102, 102, 102, 102, 104, 11, 11, 11, 104, 104, 104, 104, 107, 110, 109, 109, 111, 110, 110, 109, 110, 110, 110, 109, 110, 110, 110, 110, 113, 114, 116, 118, 120, 0, 0, 0, 0, 121, 123, 124, 126, 127, 121, 130, 131, 104, 107, 133, 133, 104, 104, 104, 104, 101, 133, 102, 107, 133, 133, 102, 102, 102, 102, 98, 133, 99, 107, 133, 133, 99, 99, 99, 99, 95, 133, 96, 107, 133, 133, 96, 96, 96, 96, 92, 133, 93, 107, 133, 133, 93, 93, 93, 93, 89, 133, 90, 107, 133, 133, 90, 90, 90, 90, 86, 133, 87, 107, 133, 133, 87, 87, 87, 87, 83, 133, 84, 107, 133, 133, 84, 84, 84, 84, 80, 133, 81, 107, 133, 133, 81, 81, 81, 81, 77, 133, 78, 107, 133, 133, 78, 78, 78, 78, 74, 133, 75, 107, 133, 133, 75, 75, 75, 75, 71, 133, 72, 107, 133, 133, 72, 72, 72, 72, 68, 133, 69, 107, 133, 133, 69, 69, 69, 69, 65, 133, 66, 107, 133, 133, 66, 66, 66, 66, 62, 133, 63, 107, 133, 133, 63, 63, 63, 63, 59, 133, 60, 107, 133, 133, 60, 60, 60, 60, 56, 133, 57, 107, 133, 133, 57, 57, 57, 57, 53, 133, 54, 107, 133, 133, 54, 54, 54, 54, 50, 133, 51, 107, 133, 133, 51, 51, 51, 51, 47, 133, 48, 107, 133, 133, 48, 48, 48, 48, 44, 133, 45, 107, 133, 133, 45, 45, 45, 45, 41, 133, 42, 107, 133, 133, 42, 42, 42, 42, 38, 133, 39, 107, 133, 133, 39, 39, 39, 39, 35, 133, 36, 107, 133, 133, 36, 36, 36, 36, 32, 133, 33, 107, 133, 133, 33, 33, 33, 33, 29, 133, 30, 107, 133, 133, 30, 30, 30, 30, 26, 133, 27, 107, 133, 133, 27, 27, 27, 27, 23, 133, 24, 107, 133, 133, 24, 24, 24, 24, 20, 133, 21, 107, 133, 133, 21, 21, 21, 21, 17, 133, 18, 107, 133, 133, 18, 18, 18, 18, 118, 0, 164, 165, 118, 118, 118, 118, 118, 118, 166, 118, 118, 118, 118, 168, 0, 0, 169, 168, 168, 0, 168, 168, 168, 0, 168, 168, 168, 168, 114, 0, 0, 171, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 173, 0, 174, 175, 173, 173, 0, 173, 173, 173, 176, 173, 173, 173, 173, 124, 0, 178, 179, 124, 124, 124, 124, 124, 124, 180, 124, 124, 124, 124, 124, 0, 178, 179, 124, 124, 124, 124, 124, 181, 180, 124, 124, 124, 124, 183, 0, 184, 185, 183, 183, 124, 183, 183, 183, 180, 183, 183, 183, 183, 127, 0, 187, 188, 127, 127, 127, 127, 127, 127, 189, 127, 127, 127, 127, 127, 0, 187, 188, 127, 127, 127, 127, 127, 191, 189, 127, 127, 127, 127, 183, 0, 184, 185, 183, 183, 127, 183, 183, 183, 189, 183, 183, 183, 183, 194, 0, 195, 196, 194, 194, 0, 194, 194, 194, 0, 194, 194, 194, 194, 131, 0, 198, 199, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 0}
var _urn_index_defaults = []int16{0, 2, 2, 2, 2, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 106, 109, 0, 0, 109, 109, 0, 0, 0, 0, 0, 0, 0, 0, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
var _urn_cond_targs = []int8{0, 1, 0, 2, 2, 3, 3, 4, 4, 5, 5, 0, 6, 6, 7, 80, 7, 8, 79, 8, 9, 78, 9, 10, 77, 10, 11, 76, 11, 12, 75, 12, 13, 74, 13, 14, 73, 14, 15, 72, 15, 16, 71, 16, 17, 70, 17, 18, 69, 18, 19, 68, 19, 20, 67, 20, 21, 66, 21, 22, 65, 22, 23, 64, 23, 24, 63, 24, 25, 62, 25, 26, 61, 26, 27, 60, 27, 28, 59, 28, 29, 58, 29, 30, 57, 30, 31, 56, 31, 32, 55, 32, 33, 54, 33, 34, 53, 34, 35, 52, 35, 36, 51, 36, 37, 37, 0, 38, 38, 0, 81, 41, 39, 40, 83, 41, 42, 42, 81, 43, 84, 91, 44, 45, 85, 46, 47, 88, 48, 49, 50, 92, 51, 0, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 41, 43, 82, 83, 39, 83, 39, 84, 85, 82, 44, 48, 85, 82, 44, 86, 87, 87, 88, 82, 46, 88, 82, 46, 89, 89, 90, 90, 91, 92, 82, 49, 92, 82, 49, 0}
var _urn_cond_actions = []int8{0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 2, 2, 3, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 4, 4, 5, 6, 6, 3, 7, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 10, 9, 11, 3, 7, 12, 10, 13, 3, 13, 7, 13, 14, 14, 10, 14, 0, 15, 3, 15, 16, 17, 17, 10, 14, 17, 0, 15, 18, 3, 18, 7, 19, 19, 10, 0}
var _urn_eof_trans = []int16{1, 2, 5, 7, 9, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 59, 62, 65, 68, 71, 74, 77, 80, 83, 86, 89, 92, 95, 98, 101, 104, 106, 109, 113, 114, 116, 118, 120, 123, 124, 126, 127, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 171, 173, 178, 181, 183, 187, 191, 193, 194, 198, 0}
var urn_start int = 1
var _ = urn_start
var urn_first_final int = 81
var _ = urn_first_final
var urn_error int = 0
var _ = urn_error
var urn_en_main int = 1
var _ = urn_en_main

func parse(out *URN, data string) (err error) {
	var p, b, cs int
	pe := len(data)
	eof := len(data)
	pct := false

	{
		cs = int(urn_start)

	}
	{
		var _trans uint = 0
		var _keys int
		var _inds int
		var _ic int
	_resume:
		{

		}
		if p == pe && p != eof {
			goto _out

		}
		if p == eof {
			if _urn_eof_trans[cs] > 0 {
				_trans = uint(_urn_eof_trans[cs]) - 1

			}

		} else {
			_keys = int((cs << 1))

			_inds = int(_urn_index_offsets[cs])

			if (data[p]) <= 126 && (data[p]) >= 33 {
				_ic = int(_urn_char_class[int((data[p]))-33])
				if _ic <= int(_urn_trans_keys[_keys+1]) && _ic >= int(_urn_trans_keys[_keys]) {
					_trans = uint(_urn_indices[_inds+int((_ic-int(_urn_trans_keys[_keys])))])

				} else {
					_trans = uint(_urn_index_defaults[cs])

				}

			} else {
				_trans = uint(_urn_index_defaults[cs])

			}

		}
		cs = int(_urn_cond_targs[_trans])
		if _urn_cond_actions[_trans] != 0 {
			switch _urn_cond_actions[_trans] {
			case 1:
				{
					err = fmt.Errorf("invalid scheme: %q", data[:p])
					{
						p += 1
						goto _out

					}

				}

			case 4:
				{
					err = errors.New("invalid nid: too long")
					{
						p += 1
						goto _out

					}

				}

			case 6:
				{
					err = fmt.Errorf("invalid nss: %q", data[b:p])
					{
						p += 1
						goto _out

					}

				}

			case 3:
				{
					b = p
					pct = false
				}

			case 10:
				{
					pct = true
				}

			case 5:
				{
					out.setNID(data[b:p])
				}

			case 9:
				{
					out.setNSS(data[b:p])
				}

			case 14:
				{
					out.r = data[b:p]
				}

			case 19:
				{
					out.q = data[b:p]
				}

			case 12:
				{
					out.f = data[b:p]
				}

			case 2:
				{
					err = fmt.Errorf("invalid nid: bad char at pos %d: %+q", p, data[p])
					{
						p += 1
						goto _out

					}

				}
				{
					err = fmt.Errorf("invalid nid: %q", data[b:p])
					{
						p += 1
						goto _out

					}

				}

			case 8:
				{
					err = fmt.Errorf("invalid nid: bad char at pos %d: %+q", p, data[p])
					{
						p += 1
						goto _out

					}

				}
				{
					err = errors.New("invalid nid: too long")
					{
						p += 1
						goto _out

					}

				}

			case 7:
				{
					b = p
					pct = false
				}
				{
					pct = true
				}

			case 13:
				{
					b = p
					pct = false
				}
				{
					out.r = data[b:p]
				}

			case 18:
				{
					b = p
					pct = false
				}
				{
					out.q = data[b:p]
				}

			case 11:
				{
					b = p
					pct = false
				}
				{
					out.f = data[b:p]
				}

			case 16:
				{
					pct = true
				}
				{
					b = p
					pct = false
				}

			case 17:
				{
					out.r = data[b:p]
				}
				{
					out.q = data[b:p]
				}

			case 15:
				{
					out.r = data[b:p]
				}
				{
					b = p
					pct = false
				}
				{
					out.q = data[b:p]
				}

			}

		}
		if p == eof {
			if cs >= 81 {
				goto _out

			}

		} else {
			if cs != 0 {
				p += 1
				goto _resume

			}

		}
	_out:
		{

		}

	}
	if err != nil {
		return err
	}
	if p != eof {
		return errors.New("invalid nss")
	}
	_ = pct
	return nil
}
