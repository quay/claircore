// Code generated by "stringer -linecomment -output=generate_string.go -type=Severity,ArchOp,PackageKind"; DO NOT EDIT.

package types

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Unknown-0]
	_ = x[Negligible-1]
	_ = x[Low-2]
	_ = x[Medium-3]
	_ = x[High-4]
	_ = x[Critical-5]
}

const _Severity_name = "UnknownNegligibleLowMediumHighCritical"

var _Severity_index = [...]uint8{0, 7, 17, 20, 26, 30, 38}

func (i Severity) String() string {
	if i >= Severity(len(_Severity_index)-1) {
		return "Severity(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Severity_name[_Severity_index[i]:_Severity_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[opInvalid-0]
	_ = x[OpEquals-1]
	_ = x[OpNotEquals-2]
	_ = x[OpPatternMatch-3]
}

const _ArchOp_name = "invalidequalsnot equalspattern match"

var _ArchOp_index = [...]uint8{0, 7, 13, 23, 36}

func (i ArchOp) String() string {
	if i >= ArchOp(len(_ArchOp_index)-1) {
		return "ArchOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ArchOp_name[_ArchOp_index[i]:_ArchOp_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UnknownPackage-0]
	_ = x[SourcePackage-1]
	_ = x[BinaryPackage-2]
}

const _PackageKind_name = "unknownsourcebinary"

var _PackageKind_index = [...]uint8{0, 7, 13, 19}

func (i PackageKind) String() string {
	if i >= PackageKind(len(_PackageKind_index)-1) {
		return "PackageKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PackageKind_name[_PackageKind_index[i]:_PackageKind_index[i+1]]
}
